{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/boardGame.js","webpack:///./assets/js/chess.js","webpack:///./assets/js/game.js","webpack:///./assets/js/kingCase.js","webpack:///./assets/js/main.js","webpack:///./assets/js/table.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACR;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2GAA2G,sBAAsB,M;AACjI,6GAA6G,sBAAsB;;AAEnI,uCAAuC,EAAE,GAAG,EAAE;AAC9C;AACA;AACA;AACA,G;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;;AAEA;;AAEA,6CAA6C,UAAU,GAAG,UAAU;AACpE,6CAA6C,cAAc,GAAG,cAAc;;AAE5E;AACA,4CAA4C,cAAc,GAAG,cAAc;AAC3E,6CAA6C,oBAAoB,GAAG,oBAAoB;;AAExF;AACA;AACA;AACA,+DAA+D,oBAAoB,GAAG,oBAAoB;;AAE1G;AACA;AACA,qBAAqB,cAAc,GAAG,cAAc;AACpD;AACA;AACA;;AAEA;;AAEA;;AAEA,2BAA2B,IAAI,GAAG,EAAE,yBAAyB,IAAI,GAAG,EAAE;AACtE;AACA;AACA,2BAA2B,IAAI,GAAG,EAAE,yBAAyB,IAAI,GAAG,EAAE;AACtE;AACA;AACA,2BAA2B,EAAE,GAAG,IAAI,yBAAyB,EAAE,GAAG,IAAI;AACtE;AACA;AACA,2BAA2B,EAAE,GAAG,IAAI,yBAAyB,EAAE,GAAG,IAAI;AACtE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,c;AACA;;AAEA;AACO;AACP,aAAa,0CAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,kDAAQ;AACrC,E;;;;;;;;;;;;ACpMA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAA8B;;;AAGvB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,EAAE,GAAG,EAAE,SAAS,4CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,EAAE,GAAG,EAAE;AAC7B;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC,mCAAmC;AAC3E;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AC5EA;AAAA;AAAO;AACP;AACA;AACA;AACA,C;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAkC;AACI;;AAEtC;;AAEA,IAAI,sDAAW;AACf,IAAI,6DAAU;AACd,CAAC,I;;;;;;;;;;;;ACPD;AAAA;AAAsC;;AAEtC;AACe;AACf;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,QAAQ,GAAG,QAAQ;AACjD,QAAQ,4DAAS;;AAEjB,KAAK;AACL,CAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./assets/js/main.js\");\n","import {KingCase} from \"./kingCase\";\nimport {Game} from \"./game\";\n\nconst board9X9 = [\n    [4, 0, 0, 1, 1, 1, 0, 0, 4],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [1, 0, 0, 0, 2, 0, 0, 0, 1],\n    [1, 1, 2, 2, 3, 2, 2, 1, 1],\n    [1, 0, 0, 0, 2, 0, 0, 0, 1],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [4, 0, 0, 1, 1, 1, 0, 0, 4]\n  ];\n\nconst black = \"assets/img/black_piece.svg\";\nconst white = \"assets/img/white_piece.svg\";\nconst white_king = \"assets/img/white_king.svg\";\nconst kingCase = \"assets/img/win_condition.svg\";\n\nlet game;\nlet currentPiece = {};\nlet board_length = 9;\n\nexport const selection = (coordinate) => {\n  const cell = game.getPiecesByCoordinate(coordinate);\n\n  //select one piece of the board\n  if (cell != undefined){\n    // if (isEmpty(currentPiece)) {\n    currentPiece = cell.copy_chess();\n    currentPiece.coordinate = coordinate;\n    // }\n  }\n  else if (!isEmpty(currentPiece)){\n    if (game.inKingCase(coordinate)){\n      if(currentPiece._king){\n        move(coordinate);\n        const coord_list = coordinate.split(' ');\n        if (coord_list[0] !== '4' && coord_list[1] !== '4'){\n          alert('White win!');\n        }\n      }\n    }\n    else{\n      move(coordinate);\n    }\n  }\n  // console.log('currentPiece', currentPiece);\n  // console.log('game', game);\n};\n\nconst move = (coordinate) => {\n  if (checkMove(coordinate)){\n    const validMove = checkPath(coordinate);\n    if (validMove){\n      moveImg(coordinate)\n      currentPiece = {};\n      selectArea(coordinate);\n    }\n  }\n};\n\nconst checkMove = (coordinate) => {\n  const piece_coord = currentPiece.coordinate.split(' ');\n  const move = coordinate.split(' ');\n  return (piece_coord[0] == move[0] || piece_coord[1] == move[1]) && game.getInGame();\n}\n\nconst checkPath = (coordinate) => {\n  //convert coordinate in string to integer\n  const piece = currentPiece.coordinate.split(' ').map(elem => parseInt(elem));\n  const move = coordinate.split(' ').map(elem => parseInt(elem));\n  let result = true;\n\n  for(let i=(piece[0] < move[0]? piece[0] + 1: move[0]), end_i=(piece[0] > move[0]? piece[0] - 1: move[0]); i <= end_i && result; i++){    \n    for(let j=(piece[1] < move[1]? piece[1] + 1: move[1]), end_j=(piece[1] > move[1]? piece[1] - 1: move[1]); j <= end_j && result; j++){\n      \n      if(game.getPiecesByCoordinate(`${i} ${j}`) != undefined){\n        result = false;\n      }\n    }\n  }  \n  return result;\n};\n\nconst moveImg = (coordinate) => {\n  const currentList = currentPiece.coordinate.split(' ').map(item => parseInt(item));\n  const coordList = coordinate.split(' ').map(item => parseInt(item));\n  \n  const img = document.querySelector('#board table').children[ currentList[0] ].children[ currentList[1] ].firstChild;\n  const parentMove = document.querySelector('#board table').children[ coordList[0] ].children[ coordList[1] ];\n  img.remove();\n  parentMove.appendChild(img);\n  game.changeChessCoordinate(currentPiece.coordinate, coordinate);\n};\n\nconst selectArea = (coordinate) => {\n  const anchor = coordinate.split(' ').map(elem => parseInt(elem));\n  for(let i = -1; i < 2; i++){\n    const start_j =  i ? 0 : -1;\n    const end_j = i ? 1 : 2;\n    for(let j = start_j; j < end_j; j += end_j){\n      kill(anchor, i, j);\n    }\n  }\n};\n\nconst kill = (anchor, x, y) => {\n\n  const anchor_color = game.getColorChess(`${anchor[0]} ${anchor[1]}`);\n  const enemy_color =  game.getColorChess(`${anchor[0] + x} ${anchor[1] + y}`);\n  \n  if (enemy_color !== \"\" && anchor_color !== enemy_color){\n    const enemy_king = game.getKingChess(`${anchor[0] + x} ${anchor[1] + y}`);\n    const ally_color = game.getColorChess(`${anchor[0] + (2 * x)} ${anchor[1] + (2 * y)}`)\n    \n    if (enemy_king){\n      killKing(anchor[0] + x, anchor[1] + y);\n    }\n    else if (ally_color === anchor_color || game.inKingCase(`${anchor[0] + (2 * x)} ${anchor[1] + (2 * y)}`)) {\n      \n      const img = document.querySelector('#board table').children[ anchor[0] + x ].children[ anchor[1] + y ].firstChild;\n      img.remove();\n      game.delete(`${anchor[0] + x} ${anchor[1] + y}`)\n    }\n  }\n};\n\nconst killKing = (x, y) => {\n\n  let count = 0;\n\n  if (game.isBlackChess(`${x-1} ${y}`) || game.inKingCase(`${x-1} ${y}`)){\n    count++;\n  }\n  if (game.isBlackChess(`${x+1} ${y}`) || game.inKingCase(`${x+1} ${y}`)){\n    count++;\n  }\n  if (game.isBlackChess(`${x} ${y-1}`) || game.inKingCase(`${x} ${y-1}`)){\n    count++;\n  }\n  if (game.isBlackChess(`${x} ${y+1}`) || game.inKingCase(`${x} ${y+1}`)){\n    count++;\n  }\n    \n  if (count == 4 || (count == 3 && game.getWhiteNumber() == 1 && edge(x, y))) {\n    alert(\"Black win\");\n  }\n};\n\nconst edge = (x, y) => {\n  return x == 0 || x == board_length - 1 || y == 0 || y == board_length - 1;\n}\n\nconst isEmpty = (currentPiece) => {\n  for(let item in currentPiece) return false;\n  return true; \n};\n\n//Parcourir tableau\nexport const printTable = () => {\n  game = new Game();\n  board9X9.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      if(cell){\n        switch (cell) {\n          case 1:\n            createImg(i, j, 'black', black, false);\n            break;\n          case 2:\n            createImg(i, j, 'white', white, false);\n            break;\n          case 3:\n            createImg(i, j, 'white', white_king, true);\n            createKingCase(i, j);\n            break;\n          case 4:\n            createKingCase(i, j);\n            break;\n        }\n      }\n    });\n  });\n}\n\nconst createImg = (x, y , str, path, king) => {\n  let img = document.createElement(\"img\");\n  img.setAttribute(\"src\", path);\n  document.querySelector('#board table').children[x].children[y].appendChild(img);\n  game.addPiece(x, y, str, path, king);\n};\n\nconst createKingCase = (x, y) => {\n  document.querySelector('#board table').children[x].children[y].classList.add('special');\n  game.addKingCase(x, y, new KingCase(kingCase));\n};","export class Chess{\n    constructor(color, img, king){\n        this._color = color;\n        this._img = img;\n        this._king = king;\n    }\n\n    copy_chess(){\n        let data = {}\n        data._color = this._color;\n        data._img = this._img;\n        data._king = this._king;\n        return data;\n    }\n\n    getColor(){\n        return this._color;\n    }\n\n    getKing(){\n        return this._king;\n    }\n}","import {Chess} from \"./chess\";\n\n\nexport class Game{\n  constructor(){\n    this._pieces = {};\n    this._kingCase = {};\n    this._inGame = true;\n    this._blackNumber = 0;\n    this._whiteNumber = 0;\n  }\n\n  getPiecesByCoordinate(coord) {\n    return this._pieces[coord];\n  }\n\n  getInGame(){\n    return this._inGame;\n  }\n  \n  getColorChess(coordinate){\n    if (this._pieces[coordinate] != undefined) return this._pieces[coordinate].getColor();\n    else return \"\";\n  }\n\n  getKingChess(coordinate){\n    return this._pieces[coordinate].getKing();\n  }\n  \n  getWhiteNumber(){\n    return this._whiteNumber;\n  }\n\n  addPiece(x, y, str, path, king){\n    this._pieces[`${x} ${y}`] = new Chess(str, path, king);\n    switch(str){\n      case \"black\":\n        this._blackNumber++;\n        break;\n      case \"white\":\n        this._whiteNumber++\n        break;\n    }\n  }\n\n  addKingCase(x, y, kCase){\n    this._kingCase[`${x} ${y}`] = kCase;\n  }\n\n  \n  inKingCase(coordinate){\n    return this._kingCase[coordinate] != undefined;\n  }\n\n  isBlackChess(coordinate){\n    return this._pieces[coordinate] != undefined && this._pieces[coordinate].getColor() == 'black';\n  }\n\n  changeChessCoordinate(oldCoord, newCoord){\n    delete Object.assign(this._pieces, {[newCoord]: this._pieces[oldCoord]})[oldCoord];\n  }\n\n  \n\n  delete(coordinate){\n    const color = this._pieces[coordinate].getColor();\n    switch(color){\n      case \"black\":\n        this._blackNumber--;\n        break;\n      case \"white\":\n        this._whiteNumber--;\n        break;\n    }\n    delete this._pieces[coordinate];\n  }\n}","export class KingCase{\n    constructor(img){\n        this._img = img;\n    }\n}","import createTable from \"./table\";\nimport {printTable} from \"./boardGame\"\n\n(() => {\n\n    createTable();\n    printTable();\n})();","import {selection} from \"./boardGame\";\n\n//Creat table inside board id\nexport default () => {\n    let board = document.getElementById(\"board\");\n    let table = document.createElement(\"table\");\n\n    for (let i = 0; i < 9; i++) {\n    let row = document.createElement(\"tr\");\n    for (let j = 0; j < 9; j++) {\n        let column = document.createElement(\"td\");\n        row.appendChild(column);\n        if ((i + j) % 2 == 0) {\n        column.className = \"bg_board1\";\n        } else {\n        column.className = \"bg_board2\";\n        }\n    }\n    table.appendChild(row);\n    }\n    board.appendChild(table);\n    \n    $('#board').on('click', (event) => {\n        const trIndex = event.target.closest('tr').rowIndex;\n        const tdIndex = event.target.closest('td').cellIndex;\n        const coordinate = `${trIndex} ${tdIndex}`;\n        selection(coordinate);\n        \n    });\n}\n\n"],"sourceRoot":""}